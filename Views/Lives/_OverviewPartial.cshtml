@model MyField.ViewModels.OverviewViewModel


<style>
    .row {
        display: flex;
        justify-content: center;
    }

    .col-5, .col-2 {
        display: flex;
        justify-content: center;
    }

    .vertical-line {
        border-left: 5px solid green;
        height: 0;
        transition: height 1s linear;
        margin: 0 auto;
        position: relative;
    }

    .half-time-label {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        background-color: white;
        color: green;
        padding: 5px 10px;
        border: 1px solid green;
        border-radius: 3px;
        z-index: 1;
        display: none; /* Initially hidden until updated */
        width: 80px;
        text-align: center;
    }

    .half-time-text {
        font-size: 16px; /* Adjust as needed */
        font-weight: bold;
        margin-bottom: 5px; /* Space between "HT" and scores */
    }

    .scores {
        font-size: 16px; /* Adjust as needed */
        font-weight: bold;
    }


</style>


<input asp-for="@Model.FixtureId" type="hidden" id="fixtureId" value="@Model..FixtureId" />

<div class="col-5">
    <div id="events-container"></div>
</div>
<div class="row match-overview-container">
    <div class="col-2">
        <div class="vertical-line">
            <div class="half-time-label" style="display: none;">
                <div class="half-time-text">HT</div>
                <div class="scores">0-0</div>
            </div>
        </div>
    </div>
    <div class="col-5">
        away events
    </div>
</div>

<script>
    var maxHeight = 0; 
    var halftimeDisplayed = false;

    function fetchEvents(fixtureId) {
        if (fixtureId) {
            console.log("Fetching events for fixtureId:", fixtureId);

            $.ajax({
                url: `/Lives/GetEvents?fixtureId=${fixtureId}`,
                type: 'GET',
                success: function (data) {
                    console.log("Data fetched successfully:", data);

                    $('#events-container').empty();

                    // Combine all events into a single array
                    let allEvents = [];
                    Object.keys(data).forEach(eventType => {
                        if (data[eventType] && Array.isArray(data[eventType])) {
                            data[eventType].forEach(event => {
                                // Add eventType for identification
                                allEvents.push({ ...event, _eventType: eventType });
                            });
                        }
                    });

                    // Check the raw events before sorting
                    console.log("Raw events:", allEvents);

                    // Sort events by RecordedTime in ascending order
                    allEvents.sort((a, b) => {
                        const timeA = new Date(a.RecordedTime).getTime();
                        const timeB = new Date(b.RecordedTime).getTime();
                        return timeA - timeB; // Ascending order
                    });

                    // Check the sorted events
                    console.log("Sorted events:", allEvents);

                    // Append sorted events to the container
                    allEvents.forEach(event => {
                        let eventHtml = '<div class="event-item">';
                        Object.keys(event).forEach(key => {
                            if (key !== '_eventType') { // Exclude _eventType from display
                                eventHtml += `<p><strong>${key}:</strong> ${event[key] || 'N/A'}</p>`;
                            }
                        });
                        eventHtml += '</div>';

                        $('#events-container').append(eventHtml);
                    });
                },
                error: function (xhr, status, error) {
                    console.error('AJAX Error:', error);
                    console.error('Response Text:', xhr.responseText);
                }
            });
        } else {
            console.error("Invalid fixtureId:", fixtureId);
        }
    }


    $(document).ready(function () {
        var fixtureId = $('#fixtureId').val();
        fetchEvents(fixtureId);
        updateVerticalLine(fixtureId);

        setInterval(function () {
            updateVerticalLine(fixtureId);
        }, 60000); // Update every 60 seconds
    });

    function updateVerticalLine(fixtureId) {
        if (fixtureId) {
            console.log("Fetching live match status for fixtureId:", fixtureId);
            $.ajax({
                url: `/Lives/GetLiveMatchStatus?fixtureId=${fixtureId}`,
                type: 'GET',
                success: function (data) {
                    if (data) {
                        var liveTime = data.LiveTime || data.liveTime;
                        var isLive = data.IsLive || data.isLive;
                        var isHalfTime = data.IsHalfTime || data.isHalfTime;
                        var homeTeamScore = data.HomeTeamScore || data.homeTeamScore;
                        var awayTeamScore = data.AwayTeamScore || data.awayTeamScore;
                        var wentToHalfTime = data.WentToHalfTime || data.wentToHalfTime;

                        console.log("Live Time:", liveTime);
                        console.log("Live Status:", isLive);
                        console.log("Half-Time Status:", isHalfTime);
                        console.log("Went To Half-Time:", wentToHalfTime);
                        console.log("Server response data:", data);

                        var height = 0;
                        if (isLive || isHalfTime) {
                            height = liveTime * 40;
                        }

                        // Check if height exceeds the maximum height
                        if (height > maxHeight) {
                            maxHeight = height;
                        }

                        // Update the vertical line height
                        $('.vertical-line').css('height', maxHeight + 'px');

                        // Calculate the position for the halftime label
                        if (wentToHalfTime || isHalfTime) {
                            // Assume halftime happens at 45 minutes (adjust if necessary)
                            var halftimeTime = 45; // Time in minutes when halftime occurs
                            var halftimePosition = maxHeight - (halftimeTime * 40); // Convert minutes to pixels (adjust multiplier if needed)

                            $('.half-time-label').css('top', halftimePosition + 'px');
                            $('.half-time-label').show();
                            $('.half-time-label .scores').text(homeTeamScore + '-' + awayTeamScore);
                            halftimeDisplayed = true; 
                        } else {
                            $('.half-time-label').hide();
                        }

                        console.log("Updated vertical line height:", maxHeight + 'px');
                    } else {
                        console.error('No data returned from server.');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('AJAX Error:', error);
                    console.error('Response Text:', xhr.responseText);
                }
            });
        } else {
            console.error("Invalid fixtureId:", fixtureId);
        }
    }


    var fixtureId = $('#fixtureId').val();
    updateVerticalLine(fixtureId);

    setInterval(function () {
        updateVerticalLine(fixtureId);
    }, 60000); 
</script>
